<<<<<<< HEAD
{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.4');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n\n    if (disableRippleChanges && !disableRippleChanges.firstChange) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes['svgIcon']) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': '_hasAriaLabel ? ariaLabel : null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  /**\n   * Whether the button should have an `aria-label`. Used for clearing the\n   * attribute to prevent it from being read instead of the button's text.\n   */\n  _hasAriaLabel?: boolean;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (typeof this._hasAriaLabel === 'undefined') {\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute('mat-icon-button')) {\n        this._hasAriaLabel = true;\n      } else {\n        const buttonTextContent = element.textContent;\n        this._hasAriaLabel = !buttonTextContent || buttonTextContent.trim().length === 0;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange =\n        changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n\n    if (changes.ariaLabel) {\n      this._hasAriaLabel = !!changes.ariaLabel.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    const zone = this._ngZone;\n\n    if (zone) {\n      // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n      zone.runOutsideAngular(() => {\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n          if (this._outlineGapCalculationNeededOnStable) {\n            this.updateOutlineGap();\n          }\n        });\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_super","prototype","ngOnDestroy","call","this","type","Directive","args","selector","exportAs","host","[attr.aria-expanded]","[attr.role]","class","inputs","providers","provide","CdkNestedTreeNode","useExisting","MatNestedTreeNode","CdkTreeNode","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","tslib_1.__extends","CdkTreeNodePadding","level","indent","MatTree","Component","template","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","_this","apply","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","position","_positionIndex","_computePositionAnimationState","ngOnInit","_position","origin","_computePositionFromOrigin","_dirChangeSubscription","unsubscribe","_translateTabComplete","complete","_onTranslateTabStarted","event","isCentering","_isCenterPosition","toState","_beforeCentering","emit","_onCentering","_elementRef","nativeElement","clientHeight","_getLayoutDirection","_dir","dir","animations","matTabsAnimations","translateTab","ChangeDetectorRef","_afterLeavingCenter","Output","_onCentered","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","_tree","Number","[attr.aria-level]","CdkTreeNodeDef","_differs","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","distinctUntilChanged","x","y","fromState","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","changeDetectorRef","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_getDefaultTextForState","_right","_left","_end","_start","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","drawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","hideDelay","_defaultOptions","_message","_manualListeners","_scrollStrategy","scrollStrategy","elementStyle","hasGestures","window","Hammer","hammerLoader","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","MatTooltip","_updatePosition","_tooltipInstance","updatePosition","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","onMenuClose","menuClosed","_handleTouchStart","_menuItemInstance","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatListOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","_hasAriaLabel","buttonTextContent","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatPlaceholder","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","zone","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
=======
{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.7');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n\n    if (disableRippleChanges && !disableRippleChanges.firstChange) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    const zone = this._ngZone;\n\n    if (zone) {\n      // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n      zone.runOutsideAngular(() => {\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n          if (this._outlineGapCalculationNeededOnStable) {\n            this.updateOutlineGap();\n          }\n        });\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/material2/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTreeNodeDef","CdkTreeNodeDef","MatNestedTreeNode","_super","_elementRef","_tree","_differs","tabIndex","_this","call","this","Number","tslib_1.__extends","prototype","ngAfterContentInit","ngOnDestroy","type","Directive","args","selector","exportAs","host","[attr.aria-expanded]","[attr.role]","class","inputs","providers","provide","CdkNestedTreeNode","useExisting","CdkTreeNode","CDK_TREE_NODE_OUTLET_NODE","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","descendants","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","role","styles","encapsulation","ViewEncapsulation","None","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_isCenterPosition","event","fromState","_position","_afterLeavingCenter","emit","MatTabBody","position","_positionIndex","_computePositionAnimationState","ngOnInit","origin","_computePositionFromOrigin","_dirChangeSubscription","unsubscribe","_translateTabComplete","complete","_onTranslateTabStarted","isCentering","toState","_beforeCentering","_onCentering","nativeElement","clientHeight","_getLayoutDirection","_dir","dir","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_onCentered","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_node","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","[attr.aria-level]","optional","MatStepHeader","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","distinctUntilChanged","x","y","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","changeDetectorRef","_orientation","ctorParameters","MatStepperNext","(click)","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_end","drawer","_start","throwMatDuplicatedDrawerError","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","_message","_manualListeners","_scrollStrategy","scrollStrategy","elementStyle","hasGestures","window","Hammer","hammerLoader","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_defaultOptions","MatTooltip","_updatePosition","_tooltipInstance","updatePosition","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","touchendHideDelay","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_handleTouchStart","_menuItemInstance","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatListOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_chipListMultiple","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_syncChipsState","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_inputContainerRef","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","zone","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
>>>>>>> 2e995745f00f364c5ddcaad6553936010ae5d503
